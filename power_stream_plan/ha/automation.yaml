alias: PowerPlan ▸ Řízení akumulace a režimu měniče
description: >-
  Automatizace pro PowerPlan řízení tepelné akumulace, baterie a měniče na
  základě predikce
triggers:
  - entity_id:
      - sensor.powerplan_charger_use_mode
      - sensor.powerplan_upper_accumulation_on
      - sensor.powerplan_lower_accumulation_on
      - sensor.powerplan_max_heat_on
      - sensor.powerplan_forced_heating_block
      - sensor.powerplan_battery_discharge_power
      - sensor.powerplan_battery_target_soc
      - sensor.powerplan_reserve_power_charging
      - sensor.powerplan_minimum_battery_soc
      - input_boolean.eeprom_fuse
    trigger: state
actions:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ powerplan_mode == 'Manual Charge' }}"
        sequence:
          - target:
              entity_id: select.solax_charger_use_mode
            data:
              option: Manual Mode
            action: select.select_option
          - target:
              entity_id: select.solax_manual_mode_select
            data:
              option: Force Charge
            action: select.select_option
      - conditions:
          - condition: template
            value_template: "{{ powerplan_mode == 'Manual Discharge' }}"
        sequence:
          - target:
              entity_id: select.solax_charger_use_mode
            data:
              option: Manual Mode
            action: select.select_option
          - target:
              entity_id: select.solax_manual_mode_select
            data:
              option: Force Discharge
            action: select.select_option
      - conditions:
          - condition: template
            value_template: "{{ powerplan_mode == 'Manual Idle' }}"
        sequence:
          - target:
              entity_id: select.solax_charger_use_mode
            data:
              option: Manual Mode
            action: select.select_option
          - target:
              entity_id: select.solax_manual_mode_select
            data:
              option: Stop Charge and Discharge
            action: select.select_option
    default:
      - target:
          entity_id: select.solax_charger_use_mode
        data:
          option: "{{ powerplan_mode }}"
        action: select.select_option
  - target:
      entity_id: switch.tepelnaakumulace_povolen_horn_akumulace
    action: |
      {% if powerplan_upper_accu %}
        switch.turn_on
      {% else %}
        switch.turn_off
      {% endif %}
  - target:
      entity_id: switch.tepelnaakumulace_povolen_spodn_akumulace
    action: |
      {% if powerplan_lower_accu %}
        switch.turn_on
      {% else %}
        switch.turn_off
      {% endif %}
  - target:
      entity_id: switch.tepelnaakumulace_maxim_ln_oh_ev_ze_s_t
    action: |
      {% if powerplan_maxh %}
        switch.turn_on
      {% else %}
        switch.turn_off
      {% endif %}
  - target:
      entity_id: switch.tepelnaakumulace_blokov_n_nucen_ho_oh_evu
    action: |
      {% if powerplan_block_heating %}
        switch.turn_on
      {% else %}
        switch.turn_off
      {% endif %}
  - target:
      entity_id: switch.tepelnaakumulace_povolen_komfortn_ho_oh_evu
    action: |
      {% if powerplan_comfort_grid %}
        switch.turn_on
      {% else %}
        switch.turn_off
      {% endif %}
mode: restart
variables:
  safety_mode: "{{ states('input_boolean.eeprom_fuse') == 'on' }}"
  powerplan_mode: >-
    {{ 'Back Up Mode' if safety_mode else
    states('sensor.powerplan_charger_use_mode') }}
  powerplan_upper_accu: "{{ is_state('sensor.powerplan_upper_accumulation_on', 'True') }}"
  powerplan_lower_accu: "{{ is_state('sensor.powerplan_lower_accumulation_on', 'True') }}"
  powerplan_maxh: "{{ is_state('sensor.powerplan_max_heat_on', 'True') }}"
  powerplan_block_heating: "{{ is_state('sensor.powerplan_forced_heating_block', 'True') }}"
  powerplan_discharge_power: "{{ states('sensor.powerplan_battery_discharge_power') | float(0) }}"
  powerplan_target_soc: "{{ states('sensor.powerplan_battery_target_soc') | float(0) }}"
  powerplan_reserve_power: "{{ states('sensor.powerplan_reserve_power_charging') | float(0) }}"
  powerplan_min_soc: "{{ states('sensor.powerplan_minimum_battery_soc') | float(0) }}"
  powerplan_comfort_grid: "{{ is_state('sensor.powerplan_comfort_heating_grid', 'True') }}"
